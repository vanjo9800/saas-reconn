package report

// func ExportToPDF(subdomains []ExposedSubdomains, filename string) {
// 	begin := time.Now()

// 	darkGrayColor := getDarkGrayColor()
// 	grayColor := getGrayColor()
// 	whiteColor := color.NewWhite()
// 	blackColour := getBlackColour()

// 	pdfReport := pdf.NewMaroto(consts.Portrait, consts.A4)
// 	pdfReport.SetPageMargins(10, 15, 10)

// 	// m.RegisterHeader(func() {
// 	// 	m.Row(20, func() {
// 	// 		// m.Col(3, func() {
// 	// 		// 	_ = m.FileImage("internal/assets/images/biplane.jpg", props.Rect{
// 	// 		// 		Center:  true,
// 	// 		// 		Percent: 80,
// 	// 		// 	})
// 	// 		// })

// 	// 		m.ColSpace(6)

// 	// 		m.Col(3, func() {
// 	// 			m.Text("SaaS reconn", props.Text{
// 	// 				Size:        12,
// 	// 				Align:       consts.Right,
// 	// 				Extrapolate: false,
// 	// 				Color:       blackColour,
// 	// 			})
// 	// 		})
// 	// 	})
// 	// })

// 	// Add header
// 	pdfReport.RegisterFooter(func() {
// 		pdfReport.Row(20, func() {
// 			pdfReport.Col(12, func() {
// 				pdfReport.Text("Generated by saas-reconn, developed by Ivan Ivanov", props.Text{
// 					Top:   16,
// 					Style: consts.BoldItalic,
// 					Size:  8,
// 					Align: consts.Right,
// 					Color: blackColour,
// 				})
// 			})
// 		})
// 	})

// 	// Report title
// 	pdfReport.Row(10, func() {
// 		pdfReport.Col(12, func() {
// 			pdfReport.Text("Exposed SaaS pages report", props.Text{
// 				Top:   3,
// 				Style: consts.Bold,
// 				Align: consts.Center,
// 			})
// 		})
// 	})

// 	// Draw tables
// 	for _, saasProvider := range subdomains {
// 		if len(saasProvider.Subdomains) == 0 {
// 			continue
// 		}

// 		// Provider title
// 		pdfReport.SetBackgroundColor(darkGrayColor)
// 		pdfReport.Row(7, func() {
// 			pdfReport.Col(12, func() {
// 				pdfReport.Text(saasProvider.Provider, props.Text{
// 					Top:   1.5,
// 					Size:  9,
// 					Style: consts.Bold,
// 					Align: consts.Center,
// 					Color: color.NewWhite(),
// 				})
// 			})
// 		})
// 		pdfReport.SetBackgroundColor(whiteColor)

// 		header := []string{"Subdomain", "Confidence", "Found in", "Screenshot"}

// 		sort.SliceStable(saasProvider.Subdomains, func(i, j int) bool {
// 			return saasProvider.Subdomains[i].Confidence > saasProvider.Subdomains[j].Confidence
// 		})
// 		var contents []SubdomainRow
// 		for _, subdomain := range saasProvider.Subdomains {
// 			contents = append(contents, SubdomainRow{
// 				Subdomain:  subdomain.Name,
// 				Confidence: subdomain.Confidence,
// 				FoundIn:    subdomain.DiscoveredBy,
// 				Screenshot: "N/A",
// 			})
// 		}

// 		drawTable(pdfReport, header, contents, pdfReport, props.TableList{
// 			HeaderProp: props.TableListContent{
// 				Size:      9,
// 				GridSizes: []uint{6, 2, 2, 2},
// 			},
// 			ContentProp: props.TableListContent{
// 				Size:      8,
// 				GridSizes: []uint{6, 2, 2, 2},
// 			},
// 			Align:                consts.Center,
// 			AlternatedBackground: &grayColor,
// 			HeaderContentSpace:   1,
// 			Line:                 false,
// 		})
// 	}

// 	// m.Row(20, func() {
// 	// 	m.ColSpace(7)
// 	// 	m.Col(2, func() {
// 	// 		m.Text("Total:", props.Text{
// 	// 			Top:   5,
// 	// 			Style: consts.Bold,
// 	// 			Size:  8,
// 	// 			Align: consts.Right,
// 	// 		})
// 	// 	})
// 	// 	m.Col(3, func() {
// 	// 		m.Text("R$ 2.567,00", props.Text{
// 	// 			Top:   5,
// 	// 			Style: consts.Bold,
// 	// 			Size:  8,
// 	// 			Align: consts.Center,
// 	// 		})
// 	// 	})
// 	// })

// 	// m.Row(15, func() {
// 	// 	m.Col(6, func() {
// 	// 		_ = m.Barcode("5123.151231.512314.1251251.123215", props.Barcode{
// 	// 			Percent: 0,
// 	// 			Proportion: props.Proportion{
// 	// 				Width:  20,
// 	// 				Height: 2,
// 	// 			},
// 	// 		})
// 	// 		m.Text("5123.151231.512314.1251251.123215", props.Text{
// 	// 			Top:    12,
// 	// 			Family: "",
// 	// 			Style:  consts.Bold,
// 	// 			Size:   9,
// 	// 			Align:  consts.Center,
// 	// 		})
// 	// 	})
// 	// 	m.ColSpace(6)
// 	// })

// 	// Save and export pdf file
// 	err := pdfReport.OutputFileAndClose(fmt.Sprintf("reports/%s.pdf", filename))
// 	if err != nil {
// 		log.Printf("Could not save PDF %s: %s", filename, err)
// 		return
// 	}

// 	end := time.Now()
// 	fmt.Printf("PDF generation took %s\n", end.Sub(begin))
// }

// func getDarkGrayColor() color.Color {
// 	return color.Color{
// 		Red:   55,
// 		Green: 55,
// 		Blue:  55,
// 	}
// }

// func getGrayColor() color.Color {
// 	return color.Color{
// 		Red:   200,
// 		Green: 200,
// 		Blue:  200,
// 	}
// }

// func getBlueColor() color.Color {
// 	return color.Color{
// 		Red:   10,
// 		Green: 10,
// 		Blue:  150,
// 	}
// }

// func getRedColor() color.Color {
// 	return color.Color{
// 		Red:   150,
// 		Green: 10,
// 		Blue:  10,
// 	}
// }

// func getBlackColour() color.Color {
// 	return color.Color{
// 		Red:   0,
// 		Green: 0,
// 		Blue:  0,
// 	}
// }
