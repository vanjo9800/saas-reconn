package report

import (
	"fmt"
	"io/ioutil"
	"log"
	"saasreconn/pkg/tools"
	"sort"
	"strings"
)

func ExportToHTML(subdomains []ExposedSubdomains, corporate string, filename string) {
	htmlContent := fmt.Sprintf(`
	<!DOCTYPE html>
	<html>
	   <head>
		  <title>Exposed pages for '%s'</title>
		  <style>%s</style>
	   </head>
	   <body>
		  <h1>Exposed SaaS pages report</h1>
		  %s
		  %s
	   </body>
	</html>`,
		corporate,
		generateCSSStyle(),
		generateTables(subdomains),
		generateFooter())

	// Save HTML report
	err := ioutil.WriteFile(fmt.Sprintf("reports/%s.html", tools.NameToPath(filename)), []byte(htmlContent), 0755)
	if err != nil {
		log.Printf("Could not save HTML report %s: %s", filename, err)
		return
	}
}

func generateCSSStyle() string {
	return `
	footer p {
		text-align: right;
		font-style: italic;
	}
	h1 {
		text-align: center;
		font-weight: bold;
	}
	h3 {
		margin: 0;
		padding: 5px;
	}
	th {
		font-weight: bold;
	}
	.table-header {
		width: 100%;
		text-align: center;
		font-weight: bold;
		color: white;
		background-color: black;
	}
	table {
		border-collapse: collapse;
		width: 100%;
	}
	th, td {
		border: 1px solid #ccc;
		padding: 10px;
		text-align: center
	}
	table.alternating tr:nth-child(even) {
		background-color: #eee;
	}
	table.alternating tr:nth-child(odd) {
		background-color: #fff;
	}
	col.subdomain {
		width: 30%;
	}
	col.confidence {
		width: 20%;
	}
	col.found-in {
		width: 20%;
	}
	col.screenshot {
		width: 30%;
	}
	img.screenshot {
		max-width: 100%;
	}`
}

func Map(elements []string, f func(string) string) []string {
	mappedElements := make([]string, len(elements))
	for i, el := range elements {
		mappedElements[i] = f(el)
	}
	return mappedElements
}

func generateTables(subdomains []ExposedSubdomains) (tableRepresenation string) {

	// Sort SaaS providers alphabetically
	sort.SliceStable(subdomains, func(i, j int) bool {
		return subdomains[i].Provider < subdomains[i].Provider
	})
	for _, saasProvider := range subdomains {
		if len(saasProvider.Subdomains) == 0 {
			continue
		}

		var tableStructure string

		// Provider title
		tableStructure += fmt.Sprintf(`<div class="table-header"><h3>%s</h3></div>`, saasProvider.Provider)

		tableHTML := `
			<col class="subdomain">
			<col class="confidence">
			<col class="found-in">
			<col class="screenshot">`
		headers := []string{"Subdomain", "Confidence", "Found in", "Screenshot"}
		tableHeaders := "<thead><tr>" + strings.Join(Map(headers, func(header string) string {
			return "<th>" + header + "</th>"
		}), "") + "</tr></thead>"
		tableHTML += tableHeaders + "<tbody>"

		sort.SliceStable(saasProvider.Subdomains, func(i, j int) bool {
			return saasProvider.Subdomains[i].Confidence > saasProvider.Subdomains[j].Confidence
		})
		for _, subdomain := range saasProvider.Subdomains {
			var tableRow string

			// Handle subdomain and link
			tableRow += fmt.Sprintf(`<td><a target="_blank" href="%s">%s</a></td>`, tools.URLFromSubdomainEntry(subdomain.Subdomain), subdomain.Subdomain)

			// Handle confidence
			tableRow += fmt.Sprintf(`<td>%d</td>`, subdomain.Confidence)

			// Handle found by
			tableRow += fmt.Sprintf(`<td>%s</td>`, strings.Join(subdomain.FoundIn, ", "))

			// Handle screenshot
			if subdomain.Screenshot == "N/A" {
				tableRow += "<td>N/A</td>"
			} else {
				tableRow += fmt.Sprintf(`<td><img class="screenshot" src="%s" alt="N/A"></td>`, subdomain.Screenshot)
			}

			tableHTML += "<tr>" + tableRow + "</tr>"
		}
		tableHTML += "</tbody>"

		tableStructure += "<table class=\"alternating\">" + tableHTML + "</table>"
		tableRepresenation += "<p>" + tableStructure + "</p>"
	}

	return tableRepresenation
}

func generateFooter() string {
	return "<footer><p>Generated by <code>saas-reconn</code>, developed by Ivan Ivanov</p></footer>"
}
